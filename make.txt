# Makefile for UNIX        

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc

# the static library archiver 
AR = ar rcs  

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__  force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI
# -std=c99 use newer version
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99 

# libraries 
# custom
NETWORKING_LIB_DIR=../networking/outputs/debug/lib
NETWORKING_STATIC_LIB_PATH=$(NETWORKING_LIB_DIR)/libnetworking.a
COMMON_FUNCTIONS_LIB_DIR=../common/outputs/debug/lib
COMMON_FUNCTIONS_STATIC_LIB_PATH=$(COMMON_FUNCTIONS_LIB_DIR)/libcommon_functions.a
# executable's libraries
COMPARERS_STATIC_LIB_PATH=../comparers/outputs/debug/lib/libcomparers.a
UNIT_TESTS_STATIC_LIB_PATH=../unit_tests/outputs/debug/lib/libunit_tests.a

# include directories
INCLUDE_DIRS= ./include ../comparers/include ../unit_tests/include ../networking/include ../common/include ../common/libraries
CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)

# the build target executable: 
TARGET = rc_client
LIBRARY = librc_client.a
SHARED_LIBRARY = librc_client.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= librc_client.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files 
SOURCE_FILES = authentication.o client_info.o conn_socket.o connection.o datagram_client.o generic_client.o service.o stream_client.o client.o

# test source files 
TEST_SOURCE_FILES = test_client.o test_transfer.o test_transfer_osx.o

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin
OUTPUTS_TEST_DIR = $(OUTPUTS_DIR)/test

all: directories libraries $(TARGET)

# make outputs directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)
	@mkdir -p $(OUTPUTS_TEST_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY) $(TEST_SOURCE_FILES)	
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_TEST_DIR)/*.o $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(NETWORKING_STATIC_LIB_PATH) $(COMMON_FUNCTIONS_STATIC_LIB_PATH) $(COMPARERS_STATIC_LIB_PATH) $(UNIT_TESTS_STATIC_LIB_PATH)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(NETWORKING_LIB_DIR) -L$(COMMON_FUNCTIONS_LIB_DIR) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o -lnetworking -lcommon_functions

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -L$(NETWORKING_LIB_DIR) -L$(COMMON_FUNCTIONS_LIB_DIR) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o -lnetworking -lcommon_functions

$(LIBRARY): $(SOURCE_FILES) 
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

authentication.o: src/networking/authentication.c include/networking/authentication.h
	$(CC) $(CFLAGS) -c src/networking/authentication.c -o $(OUTPUTS_DIR)/authentication.o

client_info.o: src/networking/client_info.c include/networking/client_info.h
	$(CC) $(CFLAGS) -c src/networking/client_info.c -o $(OUTPUTS_DIR)/client_info.o

conn_socket.o: src/networking/conn_socket.c include/networking/conn_socket.h
	$(CC) $(CFLAGS) -c src/networking/conn_socket.c -o $(OUTPUTS_DIR)/conn_socket.o

connection.o: src/networking/connection.c include/networking/connection.h
	$(CC) $(CFLAGS) -c src/networking/connection.c -o $(OUTPUTS_DIR)/connection.o

datagram_client.o: src/networking/datagram_client.c include/networking/datagram_client.h
	$(CC) $(CFLAGS) -c src/networking/datagram_client.c -o $(OUTPUTS_DIR)/datagram_client.o

generic_client.o: src/networking/generic_client.c include/networking/generic_client.h
	$(CC) $(CFLAGS) -c src/networking/generic_client.c -o $(OUTPUTS_DIR)/generic_client.o

service.o: src/networking/service.c include/networking/service.h
	$(CC) $(CFLAGS) -c src/networking/service.c -o $(OUTPUTS_DIR)/service.o

stream_client.o: src/networking/stream_client.c include/networking/stream_client.h
	$(CC) $(CFLAGS) -c src/networking/stream_client.c -o $(OUTPUTS_DIR)/stream_client.o

client.o: src/client.c include/client.h
	$(CC) $(CFLAGS) -c src/client.c -o $(OUTPUTS_DIR)/client.o

test_client.o: test/test_client.c test/test_client.h
	$(CC) $(CFLAGS) -c test/test_client.c -o $(OUTPUTS_TEST_DIR)/test_client.o

test_transfer.o: test/test_transfer.c test/test_transfer.h
	$(CC) $(CFLAGS) -c test/test_transfer.c -o $(OUTPUTS_TEST_DIR)/test_transfer.o

test_transfer_osx.o: test/test_transfer_osx.c test/test_transfer.h
	$(CC) $(CFLAGS) -c test/test_transfer_osx.c -o $(OUTPUTS_TEST_DIR)/test_transfer_osx.o

clean:
	$(RM) -rf $(OUTPUTS_DIR)